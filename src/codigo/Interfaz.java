/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author AsusVivoBook
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Analizar = new javax.swing.JButton();
        Ingreso = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Analizar.setText("Analizar Ahora");
        Analizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalizarActionPerformed(evt);
            }
        });

        Ingreso.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        Resultado.setColumns(20);
        Resultado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Resultado.setRows(5);
        jScrollPane1.setViewportView(Resultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Analizar)
                .addGap(144, 144, 144))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(Ingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(Ingreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Analizar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalizarActionPerformed
        File archivo = new File("archiv.txt");
        PrintWriter escribir;
       
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(Ingreso.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

   
        try {
            Reader lector = new BufferedReader(new FileReader("archiv.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens ==null) {
                    resultado += "Termino";
                    Resultado.setText(resultado);
                    return;
                }
                
                switch (tokens) {
                    case Adiccion:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Sustracci√≥n:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Division:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Exponente:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Parentesis_Abertura:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Parentesis_Cierrte:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Llave_Abertura:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Llave_Cierrte:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Corchete_Abertura:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Corchete_Cierrte:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Monomio:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Binomio:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Trinomio:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Polinomio:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Letra:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Digito:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Simbolo_Agrupacion:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Exponente_Fraccionario:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Numero_Fraccionario:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Simbolo_matematico:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case Espacio:
                        resultado += lexer.lexeme + "Este es " + tokens + "\n";
                        break;
                    case ERROR:
                        resultado += "Simbolo no valido en alfabeto definido";
                        break;
                    default:
                        resultado += "Token" + tokens + "\n";
                        break;
                }
                
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     
          



    }//GEN-LAST:event_AnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Analizar;
    private javax.swing.JTextField Ingreso;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
